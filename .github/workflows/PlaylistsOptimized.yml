# Nome do workflow que aparecer√° na interface do GitHub Actions
name: "üìã Listas de Reprodu√ß√£o Otimizadas (Atualiza√ß√£o Autom√°tica)"

# Eventos que disparam a execu√ß√£o do workflow
on:
  # Agenda de execu√ß√£o (cron job)
  schedule:
    # Executa diariamente √†s 03:00 da manh√£ (hor√°rio de Fortaleza)
    - cron: '0 3 * * *'
      timezone: 'America/Fortaleza'
  
  # Permite acionar manualmente o workflow na interface do GitHub
  workflow_dispatch:

# Permiss√µes necess√°rias para o workflow
permissions:
  # Permiss√£o para escrever no reposit√≥rio (necess√°rio para fazer push das altera√ß√µes)
  contents: write

# Jobs que comp√µem o workflow
jobs:
  # Job principal: download e processamento das playlists
  download_playlists:
    # Nome do job que aparecer√° na interface
    name: "üì• Download e processamento"
    
    # Executa em um runner com Ubuntu (√∫ltima vers√£o dispon√≠vel)
    runs-on: ubuntu-latest

    # Passos sequenciais que comp√µem o job
    steps:
      # ================================
      # Passo 1: Fazer checkout do reposit√≥rio
      # ================================
      - name: "üîΩ Checkout do reposit√≥rio (com token)"
        # Usa a a√ß√£o oficial de checkout (vers√£o 4)
        uses: actions/checkout@v4
        with:
          # Usa o token de autentica√ß√£o padr√£o do GitHub
          token: ${{ secrets.GITHUB_TOKEN }}
          # Faz fetch de todo o hist√≥rico (n√£o apenas o √∫ltimo commit)
          fetch-depth: 0

      # ================================
      # Passo 2: Configurar ambiente Python
      # ================================
      - name: "üêç Configurar Python"
        # Usa a a√ß√£o oficial de setup do Python (vers√£o 4)
        uses: actions/setup-python@v4
        with:
          # Define a vers√£o do Python como 3.8
          python-version: '3.8'

      # ================================
      # Passo 3: Instalar depend√™ncias necess√°rias
      # ================================
      - name: "‚öôÔ∏è Instalar depend√™ncias"
        run: |
          # Atualiza o pip para a vers√£o mais recente
          python -m pip install --upgrade pip
          # Instala o pacote requests para fazer requisi√ß√µes HTTP
          pip install requests

      # ================================
      # Passo 4: Executar o primeiro script Python (playlists2.py)
      # ================================
      - name: "‚ñ∂Ô∏è Executar playlists.m3u.py"
        # Comando para executar o script Python
#        run: python playlists.m3u.py
      
      # ================================
      # Passo 5: Executar o segundo script Python (playlists.py)
      # ================================
      - name: "‚ñ∂Ô∏è Executar playlists.py"
        run: python playlists.py
      
      # ================================
      # Passo 6: Executar o terceiro script Python (Playlist.py)
      # ================================
      # - name: "‚ñ∂Ô∏è Executar Playlist.py"
        # run: python Playlist.py

      # ================================
      # Passo 7: Adicionar data/hora de atualiza√ß√£o nos arquivos gerados
      # ================================
      - name: "‚è±Ô∏è Adicionar data/hora nos arquivos"
        run: |
          # Loop pelos arquivos .m3u e .xml.gz no diret√≥rio raiz
          for file in $(find . -maxdepth 1 -type f -name "*.m3u" -o -name "*.xml.gz"); do
            # Adiciona um coment√°rio com a data/hora atual no final de cada arquivo
            # Usa o fuso hor√°rio de Fortaleza (BRT)
            echo -e "\n\n# Atualizado em $(TZ='America/Fortaleza' date '+%d/%m/%Y - %H:%M:%S') BRT" >> "$file"
          done

      # ================================
      # Passo 8: Verificar se houve altera√ß√µes nos arquivos
      # ================================
      - name: "üîç Verificar altera√ß√µes"
        # Define um ID para referenciar a sa√≠da deste passo
        id: check-changes
        run: |
          # Mostra o status do git (formato simplificado)
          git status --porcelain
          
          # Verifica se h√° altera√ß√µes n√£o commitadas
          if [ -n "$(git status --porcelain)" ]; then
            # Se houver altera√ß√µes, define a sa√≠da changes_detected como true
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            # Se n√£o houver altera√ß√µes, define como false
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      # ================================
      # Passo 9: Commit e push das altera√ß√µes (se houver mudan√ßas)
      # ================================
      - name: "üíæ Commit e push das altera√ß√µes"
        # Executa apenas se o passo anterior detectou altera√ß√µes
        if: steps.check-changes.outputs.changes_detected == 'true'
        run: |
          # Configura o usu√°rio do git (usando o bot do GitHub Actions)
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Adiciona todas as altera√ß√µes
          git add .
          
          # Cria um commit com a data/hora atual
          git commit -m "üîÑ Atualiza√ß√£o autom√°tica - $(date +'%d/%m/%Y - %H:%M:%S')"
          
          # Puxa quaisquer altera√ß√µes remotas para evitar conflitos
          git pull
          
          # Envia as altera√ß√µes para o reposit√≥rio remoto
          git push
        env:
          # Usa o token de autentica√ß√£o para fazer push
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ================================
      # Passo 10: Mostrar status final da execu√ß√£o
      # ================================
      - name: "‚úÖ Status final"
        run: |
          # Verifica se houve altera√ß√µes e exibe mensagem apropriada
          if [ "${{ steps.check-changes.outputs.changes_detected }}" = "true" ]; then
            echo "Altera√ß√µes foram commitadas e enviadas com sucesso!"
          else
            echo "Nenhuma altera√ß√£o detectada - nada para commit."
          fi
