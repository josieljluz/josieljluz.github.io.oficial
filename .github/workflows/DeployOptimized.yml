# ========================================================================
# üöÄ Workflow de Implementa√ß√£o Autom√°tica no GitHub Pages (Otimizado para Jekyll)
# ========================================================================

# Nome do workflow que aparecer√° na interface do GitHub Actions
name: "üöÄ Deploy Autom√°tico do Jekyll no GitHub Pages (Otimizado)"

# ================================
# üî• Configura√ß√£o de Gatilhos
# ================================
on:
  # Acionar quando houver push na branch main
  push:
    branches: ["main"]
    # Monitorar todas as altera√ß√µes de arquivos (n√£o apenas caminhos espec√≠ficos)
    paths: ['**/*']
  
  # Permitir acionamento manual pela interface do GitHub
  workflow_dispatch:
  
  # Configura√ß√£o do agendamento autom√°tico do workflow
  schedule:
  # Agenda a execu√ß√£o di√°ria ao meio-dia (12:00) no hor√°rio UTC
  # A sintaxe usa padr√£o cron com 5 campos (minuto hora dia m√™s dia-da-semana)
    - cron: '0 15 * * *'
      timezone: 'America/Fortaleza'  # Usa o mesmo fuso que Bras√≠lia (UTC-3)
  # Explica√ß√£o detalhada da sintaxe cron:
  # - '0'    - no minuto 0 (em ponto)
  # - '15'   - √†s 15 horas UTC (que equivalem a 12h em Fortaleza)
  # - '*'    - todos os dias do m√™s
  # - '*'    - todos os meses do ano
  # - '*'    - todos os dias da semana (de domingo a s√°bado)
  
  # Observa√ß√µes importantes:
  # 1. O hor√°rio √© sempre em UTC (Tempo Universal Coordenado)
  # 2. O GitHub pode atrasar em at√© 15 minutos a execu√ß√£o agendada
  # 3. O workflow n√£o ser√° executado se n√£o houver altera√ß√µes no reposit√≥rio,
  #    a menos que voc√™ configure para rodar sempre

# ================================
# üîê Configura√ß√µes de Permiss√£o
# ================================
permissions:
  contents: write  # Necess√°rio para fazer commit de altera√ß√µes no reposit√≥rio
  pages: write     # Necess√°rio para implementa√ß√£o no GitHub Pages
  id-token: write  # Necess√°rio para gera√ß√£o de token OIDC

# ================================
# üéõÔ∏è Controle de Concorr√™ncia
# ================================
concurrency:
  group: "pages"   # Agrupar todas as implementa√ß√µes no Pages
  cancel-in-progress: false  # N√£o cancelar execu√ß√µes existentes (alterado do padr√£o)

# ================================
# üèóÔ∏è Defini√ß√£o dos Jobs
# ================================
jobs:
  # ================================
  # ‚öôÔ∏è Job de Configura√ß√£o Inicial
  # ================================
  configuracao:
    name: "‚öôÔ∏è Configura√ß√£o Inicial"
    runs-on: ubuntu-latest
    
    steps:
      # ------------------------------
      # Passo 1: Checkout do Reposit√≥rio
      # ------------------------------
      - name: "üì• Baixar C√≥digo-Fonte"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Obter hist√≥rico completo do git
          path: main-repo # Fazer checkout em subdiret√≥rio

      # ------------------------------
      # Passo 2: Configura√ß√£o do Node.js
      # ------------------------------
      - name: "‚éî Configurar Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Usando vers√£o LTS

      # ------------------------------
      # Passo 3: Manipula√ß√£o do package.json
      # ------------------------------
      - name: "üìÑ Verificar/Criar package.json"
        run: |
          cd main-repo
          # Criar package.json b√°sico se n√£o existir
          if [ ! -f "package.json" ]; then
            echo "Criando package.json b√°sico..."
            echo '{
              "name": "temp-site",
              "version": "1.0.0",
              "scripts": {
                "start": "echo 'No script defined' && exit 0"
              }
            }' > package.json
          fi

      # ------------------------------
      # Passo 4: Instala√ß√£o de Depend√™ncias
      # ------------------------------
      - name: "üì¶ Instalar Depend√™ncias"
        run: |
          cd main-repo
          # Instalar sem lockfile para evitar conflitos
          npm install --no-package-lock
          # Instala√ß√£o regular
          npm install

      # ------------------------------
      # Passo 5: Gera√ß√£o de Metadados
      # ------------------------------
      - name: "üè∑Ô∏è Gerar Metadados"
        run: |
          cd main-repo
          npm start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ------------------------------
      # Passo 6: Commit das Altera√ß√µes
      # ------------------------------
      - name: "üíæ Salvar Altera√ß√µes"
        run: |
          cd main-repo
          # Configurar usu√°rio do git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Adicionar arquivo de metadados
          git add files_metadata.json
          
          # Verificar se h√° altera√ß√µes para commitar
          if git diff --cached --quiet; then
            echo "Nenhuma altera√ß√£o para commitar"
          else
            # Tentar fazer commit e push com resolu√ß√£o de conflitos
            git commit -m "Atualiza√ß√£o autom√°tica de metadados [skip ci]" || echo "Commit falhou - continuando..."
            git pull --rebase origin main || echo "Rebase falhou - continuando..."
            git push origin main || echo "Push falhou - continuando..."
          fi
        continue-on-error: true  # N√£o falhar o workflow em caso de erros

  # ================================
  # üèóÔ∏è Job de Constru√ß√£o do Site
  # ================================
  construcao:
    name: "üèóÔ∏è Constru√ß√£o do Site"
    needs: configuracao  # Depende do job de configura√ß√£o
    runs-on: ubuntu-latest
    
    steps:
      # ------------------------------
      # Passo 1: Checkout do Reposit√≥rio
      # ------------------------------
      - name: "üì• Baixar C√≥digo-Fonte"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: main-repo

      # ------------------------------
      # Passo 2: Configura√ß√£o do Ambiente Ruby
      # ------------------------------
      - name: "üíé Configurar Ruby"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'  # Recomendado para Jekyll
          bundler-cache: true  # Cache de gems para performance

      # ------------------------------
      # Passo 3: Configura√ß√£o do GitHub Pages
      # ------------------------------
      - name: "‚öôÔ∏è Configurar GitHub Pages"
        uses: actions/configure-pages@v5

      # ------------------------------
      # Passo 4: Build do Jekyll
      # ------------------------------
      - name: "üõ†Ô∏è Construir Site (Jekyll)"
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./main-repo  # Diret√≥rio de origem
          destination: ./_site  # Diret√≥rio de sa√≠da

      # ------------------------------
      # Passo 5: Upload do Artefato
      # ------------------------------
      - name: "üì§ Enviar Artefatos"
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'  # Caminho para o site constru√≠do

  # ================================
  # üöÄ Job de Implementa√ß√£o
  # ================================
  deploy:
    name: "üöÄ Publicar no GitHub Pages"
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: construcao  # Depende do job de constru√ß√£o
    
    steps:
      # ------------------------------
      # Passo 1: Verificar Implementa√ß√µes Existentes
      # ------------------------------
      - name: "üîç Verificar Publica√ß√µes Existentes"
        id: verificar-deploy
        run: |
          # Consultar API do GitHub para builds mais recentes do Pages
          resposta=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/pages/builds/latest")
          
          # Extrair status e informa√ß√µes do gatilho
          status=$(echo "$resposta" | jq -r '.status')
          trigger=$(echo "$resposta" | jq -r '.trigger.name')
          
          # L√≥gica de decis√£o
          if [[ "$status" == "building" && "$trigger" == "GitHub Pages" ]]; then
            echo "üîÑ Deployment oficial em andamento - abortando"
            echo "pular_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$status" == "built" && "$trigger" == "GitHub Pages" ]]; then
            echo "‚úÖ Deployment oficial j√° conclu√≠do - abortando"
            echo "pular_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚úã Nenhum deployment oficial ativo - podemos prosseguir"
            echo "pular_deploy=false" >> $GITHUB_OUTPUT
          fi

      # ------------------------------
      # Passo 2: Implementar no GitHub Pages
      # ------------------------------
      - name: "üåê Publicar Site"
        if: steps.verificar-deploy.outputs.pular_deploy != 'true'
        id: deployment
        uses: actions/deploy-pages@v4

  # ================================
  # ‚ÑπÔ∏è Job de Status Final
  # ================================
  status:
    name: "‚ÑπÔ∏è Status Final"
    needs: [configuracao, deploy]  # Depende dos jobs de configura√ß√£o e implementa√ß√£o
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Evitar travamentos
    
    steps:
      # ------------------------------
      # Passo 1: Exibir Status Final
      # ------------------------------
      - name: "Exibir Resultado"
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment conclu√≠do com sucesso!"
            echo "URL: ${{ needs.deploy.outputs.page_url }}"
          elif [[ "${{ steps.verificar-deploy.outputs.pular_deploy }}" == "true" ]]; then
            echo "‚è∏Ô∏è Deployment n√£o foi necess√°rio - j√° existe um processo ativo"
          else
            echo "‚ùå Falha no processo de deployment"
          fi
