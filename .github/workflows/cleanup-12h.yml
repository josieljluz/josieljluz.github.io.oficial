# Nome do workflow que aparecer√° na interface do GitHub Actions
name: üßπüßπLimpar Execu√ß√µes de Workflow Antigas (12h)

# Configura√ß√£o dos gatilhos do workflow
on:
  # Agendamento de execu√ß√£o autom√°tica
  schedule:
    # Cron expression que executa a cada 12 horas, no minuto 1
    # Formato: minuto hora dia-do-m√™s m√™s dia-da-semana
    # */12 - a cada 12 horas
    - cron: '1 */12 * * *'
  
  # Permite execu√ß√£o manual atrav√©s da interface do GitHub
  workflow_dispatch:

# Defini√ß√£o dos jobs (tarefas) que ser√£o executados
jobs:
  # Job principal de limpeza
  cleanup:
    # Configura o ambiente de execu√ß√£o (√∫ltima vers√£o do Ubuntu)
    runs-on: ubuntu-latest
    
    # Permiss√µes necess√°rias para o job
    permissions:
      # Permiss√£o para gerenciar execu√ß√µes do GitHub Actions
      actions: write

    # Passos sequenciais que ser√£o executados
    steps:
      # Passo para deletar execu√ß√µes antigas
      - name: üóëÔ∏è Deletar execu√ß√µes de workflow antigas
        # Vari√°veis de ambiente dispon√≠veis para este passo
        env:
          # Token de autentica√ß√£o autom√°tico do GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        # Script shell que ser√° executado
        run: |
          # 1. In√≠cio do processo - mensagem informativa
          echo "üîç Buscando execu√ß√µes de workflow antigas..."

          # 2. Obter todas as execu√ß√µes de workflow do reposit√≥rio
          # Usa a CLI do GitHub (gh) para fazer uma chamada √† API
          # -H: Define o header Accept
          # /repos/{owner}/{repo}/actions/runs: Endpoint da API
          # --jq: Filtra o JSON de resposta para obter apenas id, created_at e status
          runs=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            "/repos/${{ github.repository }}/actions/runs" \
            --jq '.workflow_runs[] | {id, created_at, status}')

          # 3. Verifica se h√° execu√ß√µes para processar
          if [ -z "$runs" ]; then
            echo "‚úÖ Nenhuma execu√ß√£o de workflow encontrada."
            # Sai com c√≥digo 0 (sucesso) se n√£o houver execu√ß√µes
            exit 0
          fi

          # 4. Obt√©m o timestamp atual em segundos (UTC)
          now=$(date -u +%s)

          # 5. Processa cada execu√ß√£o encontrada
          # Usa jq para iterar sobre cada objeto JSON
          # -c: Sa√≠da compacta (uma linha por objeto)
          echo "$runs" | jq -c 'select(.created_at != null)' | while read -r run; do
            # 5.1 Extrai o ID da execu√ß√£o
            id=$(echo "$run" | jq -r '.id')
            
            # 5.2 Extrai a data de cria√ß√£o
            created_at=$(echo "$run" | jq -r '.created_at')

            # 5.3 Converte a data de cria√ß√£o para timestamp Unix
            # Tenta primeiro com formato GNU (Linux)
            if date -u -d "$created_at" >/dev/null 2>&1; then
              run_date=$(date -u -d "$created_at" +%s)
            # Se falhar, tenta formato BSD (macOS)
            elif date -u -j -f "%Y-%m-%dT%H:%M:%SZ" "$created_at" >/dev/null 2>&1; then
              run_date=$(date -u -j -f "%Y-%m-%dT%H:%M:%SZ" "$created_at" +%s)
            # Se ambos falharem, registra erro e continua
            else
              echo "‚ö†Ô∏è N√£o foi poss√≠vel analisar a data: $created_at"
              continue
            fi

            # 5.4 Calcula a diferen√ßa de tempo em segundos
            diff_seconds=$(( now - run_date ))
            # Converte para horas (3600 segundos = 1 hora)
            diff_hours=$(( diff_seconds / 3600 ))

            # 5.5 Verifica se a execu√ß√£o tem mais de 12 horas
            if [ "$diff_hours" -ge 12 ]; then
              # 5.5.1 Log informativo antes de deletar
              echo "üóëÔ∏è Deletando execu√ß√£o de workflow ID: $id (Criada h√° $diff_hours horas)"
              
              # 5.5.2 Chamada √† API para deletar a execu√ß√£o
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github.v3+json" \
                "/repos/${{ github.repository }}/actions/runs/$id" \
                >/dev/null 2>&1 || echo "‚ö†Ô∏è Falha ao deletar execu√ß√£o ID: $id"
            else
              # 5.6 Log para execu√ß√µes que ser√£o mantidas
              echo "‚úÖ Execu√ß√£o de workflow ID: $id ainda n√£o tem 12 horas (Criada h√° $diff_hours horas)"
            fi
          done
          
          # 6. Mensagem final indicando conclus√£o do processo
          echo "üèÅ Processo de limpeza conclu√≠do!"
